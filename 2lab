import random

def is_valid(grid, num, row, col):
    """Проверяет, можно ли поставить число num в ячейку (row, col) в сетке grid."""

    # Проверка по строке
    for i in range(9):
        if grid[row][i] == num:
            return False

    # Проверка по столбцу
    for i in range(9):
        if grid[i][col] == num:
            return False

    # Проверка по блоку 3x3
    block_row = (row // 3) * 3
    block_col = (col // 3) * 3
    for i in range(block_row, block_row + 3):
        for j in range(block_col, block_col + 3):
            if grid[i][j] == num:
                return False

    return True


def solve_sudoku(grid):
    """Решает головоломку Судоку с помощью рекурсии."""

    for row in range(9):
        for col in range(9):
            if grid[row][col] == 0:
                for num in range(1, 10):
                    if is_valid(grid, num, row, col):
                        grid[row][col] = num
                        if solve_sudoku(grid):
                            return True
                        grid[row][col] = 0  # Если не удалось, сбрасываем значение
                return False  # Если для ячейки нет подходящего числа
    return True  # Если все ячейки заполнены корректно


def create_sudoku():
    """Создает новую головоломку Судоку."""
    grid = [[0 for _ in range(9)] for _ in range(9)]
    solve_sudoku(grid)
    
    # Удаляем значения, чтобы получить головоломку
    empty_cells = 0
    while empty_cells < 30:  # Задаем сложность (Количество удаленных чисел)
        row = random.randrange(9)
        col = random.randrange(9)
        if grid[row][col] != 0:
          grid[row][col] = 0
          empty_cells +=1
    return grid

def print_sudoku(grid):
    """Выводит головоломку Судоку на экран."""
    for i in range(9):
        if i % 3 == 0 and i != 0:
            print("- - - - - - - - - - -")
        for j in range(9):
            if j % 3 == 0 and j != 0:
                print(" | ", end="")
            print(grid[i][j], end=" ")
        print()



# Пример использования
grid = create_sudoku()
print_sudoku(grid)
